TRUE ~ Outcome
)) %>%
filter(Player != opponent) %>%
group_by(Outcome) %>%
summarize(Count = n()) %>%
ungroup() %>%
arrange(desc(Count)) %>%
gt()
mbb_game_dates <- c("11/10/22", "11/12/22", "11/13/22", "11/18/22", "11/19/22", "11/26/22", "11/30/22")
players <- c('Alec Bryan', 'Kerem Ozturk', 'Leonardo Edo', 'Skyler Twyman', 'Ezra Moos', 'Thomas Kurowski', 'Dashiel Walker', 'Elliot Paschal', 'Arrish Bhandal', 'Josh Preston', 'Jackson Piotrowski', 'Bryce Hopkins', 'Tola Olorode', 'Joe Berry', 'Ben Chasin', 'Blake Hawthorne', 'Eamonn Kenah', 'Alex Battist')
library(janitor)
raw_turnovers %>%
filter(~Date %in% mbb_game_dates,
Player %in% players) %>%
mutate(`Post Entry` = (`Turnover Type` == "Post Entry"),
`Perimeter/Strip` = (`Turnover Type` == "Perimeter/Strip"),
`Drive` = (`Turnover Type` == "Drive"),
`Drive + Pass` = (`Turnover Type` == "Drive + Pass"),
`Reversal/Pass` = (`Turnover Type` == "Reversal/Pass"),
`Off-Ball` = (`Turnover Type` == "Off-Ball")) %>%
group_by(Player) %>%
summarize(`Post Entry` = sum(`Post Entry`),
`Perimeter/Strip` = sum(`Perimeter/Strip`),
`Drive` = sum(`Drive`),
`Drive + Pass` = sum(`Drive + Pass`),
`Reversal/Pass` = sum(`Reversal/Pass`),
`Off-Ball` = sum(`Off-Ball`),
Total = n()) %>%
ungroup() %>%
arrange(desc(Total)) %>%
adorn_totals("row") %>%
gt() %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_column_labels(columns = everything())) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_title(groups = "title")) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = Total)) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(rows = Player == "Total")) %>%
tab_header(title = md("Turnover Type by Player"),
subtitle = "2022 Preseason | UChicago Men's Basketball Team") %>%
tab_footnote(footnote = "Includes travels, double-dribbles, out-of-bounds (unless occuring on a drive)",
locations = cells_column_labels(columns = `Perimeter/Strip`)) %>%
tab_footnote(footnote = "Includes illegal screens, three-in-the-key, away-from-the-ball offensive fouls",
locations = cells_column_labels(columns = `Off-Ball`))
raw_turnovers %>%
filter(!Date %in% mbb_game_dates,
Player %in% players) %>%
mutate(`Post Entry` = (`Turnover Type` == "Post Entry"),
`Perimeter/Strip` = (`Turnover Type` == "Perimeter/Strip"),
`Drive` = (`Turnover Type` == "Drive"),
`Drive + Pass` = (`Turnover Type` == "Drive + Pass"),
`Reversal/Pass` = (`Turnover Type` == "Reversal/Pass"),
`Off-Ball` = (`Turnover Type` == "Off-Ball")) %>%
group_by(Player) %>%
summarize(`Post Entry` = sum(`Post Entry`),
`Perimeter/Strip` = sum(`Perimeter/Strip`),
`Drive` = sum(`Drive`),
`Drive + Pass` = sum(`Drive + Pass`),
`Reversal/Pass` = sum(`Reversal/Pass`),
`Off-Ball` = sum(`Off-Ball`),
Total = n()) %>%
ungroup() %>%
arrange(desc(Total)) %>%
adorn_totals("row") %>%
gt() %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_column_labels(columns = everything())) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_title(groups = "title")) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = Total)) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(rows = Player == "Total")) %>%
tab_header(title = md("Turnover Type by Player"),
subtitle = "2022 Preseason | UChicago Men's Basketball Team") %>%
tab_footnote(footnote = "Includes travels, double-dribbles, out-of-bounds (unless occuring on a drive)",
locations = cells_column_labels(columns = `Perimeter/Strip`)) %>%
tab_footnote(footnote = "Includes illegal screens, three-in-the-key, away-from-the-ball offensive fouls",
locations = cells_column_labels(columns = `Off-Ball`))
raw_turnovers
if (mens_team) {
url <- mbb_url
raw_posts <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=1904120862")
raw_turnovers <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=2056191088")
} else {
url <- wbb_url
raw_posts <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=748348799")
raw_turnovers <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=2056191088")
}
raw_turnovers %>%
filter(!Date %in% mbb_game_dates,
Player %in% players) %>%
mutate(`Post Entry` = (`Turnover Type` == "Post Entry"),
`Perimeter/Strip` = (`Turnover Type` == "Perimeter/Strip"),
`Drive` = (`Turnover Type` == "Drive"),
`Drive + Pass` = (`Turnover Type` == "Drive + Pass"),
`Reversal/Pass` = (`Turnover Type` == "Reversal/Pass"),
`Off-Ball` = (`Turnover Type` == "Off-Ball")) %>%
group_by(Player) %>%
summarize(`Post Entry` = sum(`Post Entry`),
`Perimeter/Strip` = sum(`Perimeter/Strip`),
`Drive` = sum(`Drive`),
`Drive + Pass` = sum(`Drive + Pass`),
`Reversal/Pass` = sum(`Reversal/Pass`),
`Off-Ball` = sum(`Off-Ball`),
Total = n()) %>%
ungroup() %>%
arrange(desc(Total)) %>%
adorn_totals("row") %>%
gt() %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_column_labels(columns = everything())) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_title(groups = "title")) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = Total)) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(rows = Player == "Total")) %>%
tab_header(title = md("Turnover Type by Player"),
subtitle = "2022 Preseason | UChicago Men's Basketball Team") %>%
tab_footnote(footnote = "Includes travels, double-dribbles, out-of-bounds (unless occuring on a drive)",
locations = cells_column_labels(columns = `Perimeter/Strip`)) %>%
tab_footnote(footnote = "Includes illegal screens, three-in-the-key, away-from-the-ball offensive fouls",
locations = cells_column_labels(columns = `Off-Ball`))
library(tidyverse)
library(gt)
library(gsheet)
library(janitor)
rm(list = ls())
mbb_url <- "https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=2032963821"
wbb_url <- "https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=2032963821"
mens_team <- FALSE
mens_team <- FALSE
date <- "12/30/22"
opponent <- "Knox"
if (mens_team) {
url <- mbb_url
raw_posts <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=1904120862")
raw_turnovers <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=2056191088")
} else {
url <- wbb_url
raw_posts <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=748348799")
raw_turnovers <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=2056191088")
}
raw_shots <- gsheet2tbl(url) %>%
mutate(Region = case_when(
Region == 'P' ~ "Paint",
Region == 'LC' ~ "Left Corner",
Region == 'RC' ~ "Right Corner",
Region == 'LW' ~ "Left Wing",
Region == 'RW' ~ "Right Wing",
Region == 'T' ~ "Top",
Region == 'TK' ~ "Top of Key",
Region == 'RE' ~ "Right Elbow",
Region == 'LE' ~ "Left Elbow",
Region == 'RB' ~ "Right Baseline",
Region == 'LB' ~ "Left Baseline"
),
Range = case_when(
(Region == 'Left Corner') |
(Region == 'Left Wing') |
(Region == 'Top') |
(Region == 'Right Wing') |
(Region == 'Right Corner') ~ "3",
TRUE ~ "2"
),
`Shot Type` = case_when(
`Shot Type` == 'S' ~ "Catch & Shoot (Set)",
`Shot Type` == 'M' ~ "Catch & Shoot (Moving)",
`Shot Type` == 'L' ~ "Layup",
`Shot Type` == 'F' ~ "Floater",
`Shot Type` == 'H' ~ "Hook Shot",
`Shot Type` == 'B' ~ "Stepback",
`Shot Type` == 'P' ~ "Pull-Up"
))
raw_shots <- filter(raw_shots, Date == date)
raw_posts <- filter(raw_posts, Date == date)
raw_turnovers <- filter(raw_turnovers, Date == date)
raw_turnovers %>%
filter(Player != opponent) %>%
group_by(`Turnover Type`) %>%
summarize(Count = n()) %>%
ungroup() %>%
arrange(desc(Count)) %>%
gt()
library(tidyverse)
library(ggplot2)
library(ggimage)
library(gsheet)
rm(list = ls())
women <- TRUE
mbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/mbb_uaa_scout.csv")
wbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/wbb_uaa_scout.csv")
mbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=136251738")
wbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=1703250336")
logos <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/uaa_logos.csv")
if (women) {
logs <- wbb_logs
games <- wbb_games
subtitle <- "UAA Women's Basketball | Through December 30, 2022"
} else {
logs <- mbb_logs
games <- mbb_games
subtitle <- "UAA Men's Basketball | Through December 30, 2022"
}
logs <-
logs %>%
filter(Opponent == "Total") %>%
select(Team, `ORB%`, `DRB%`)
games <-
games %>%
filter(Game == "Total") %>%
mutate(Team = "Chicago") %>%
select(Team, `ORB%`, `DRB%`)
conference <-
rbind(logs, games) %>%
merge(logos,
by="Team")
conference %>%
ggplot(aes(x=`DRB%`,
y=`ORB%`)) +
geom_hline(yintercept=mean(conference$`ORB%`), linetype="dashed") +
geom_vline(xintercept=mean(conference$`DRB%`), linetype="dashed") +
geom_image(aes(image=URL),
size=0.1,
stat='identity') +
labs(title="Who are the best and worst rebounding teams?",
subtitle=subtitle,
x="Offensive Rebound Rate (ORB%)",
y="Defensive Rebound Rate (DRB%)") +
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=10))
library(tidyverse)
library(ggplot2)
library(ggimage)
library(gsheet)
rm(list = ls())
women <- FALSE
mbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/mbb_uaa_scout.csv")
wbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/wbb_uaa_scout.csv")
mbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=136251738")
wbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=1703250336")
logos <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/uaa_logos.csv")
if (women) {
logs <- wbb_logs
games <- wbb_games
subtitle <- "UAA Women's Basketball | Through December 30, 2022"
} else {
logs <- mbb_logs
games <- mbb_games
subtitle <- "UAA Men's Basketball | Through December 30, 2022"
}
logs <-
logs %>%
filter(Opponent == "Total") %>%
select(Team, `ORB%`, `DRB%`)
games <-
games %>%
filter(Game == "Total") %>%
mutate(Team = "Chicago") %>%
select(Team, `ORB%`, `DRB%`)
conference <-
rbind(logs, games) %>%
merge(logos,
by="Team")
conference %>%
ggplot(aes(x=`DRB%`,
y=`ORB%`)) +
geom_hline(yintercept=mean(conference$`ORB%`), linetype="dashed") +
geom_vline(xintercept=mean(conference$`DRB%`), linetype="dashed") +
geom_image(aes(image=URL),
size=0.1,
stat='identity') +
labs(title="Who are the best and worst rebounding teams?",
subtitle=subtitle,
x="Defensive Rebound Rate (ORB%)",
y="Offensive Rebound Rate (DRB%)") +
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=10))
library(tidyverse)
library(ggplot2)
library(ggimage)
library(gsheet)
rm(list = ls())
women <- TRUE
mbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/mbb_uaa_scout.csv")
wbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/wbb_uaa_scout.csv")
mbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=136251738")
wbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=1703250336")
logos <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/uaa_logos.csv")
if (women) {
logs <- wbb_logs
games <- wbb_games
subtitle <- "UAA Women's Basketball | Through December 30, 2022"
} else {
logs <- mbb_logs
games <- mbb_games
subtitle <- "UAA Men's Basketball | Through December 30, 2022"
}
logs <-
logs %>%
filter(Opponent == "Total") %>%
select(Team, `ORB%`, `DRB%`)
games <-
games %>%
filter(Game == "Total") %>%
mutate(Team = "Chicago") %>%
select(Team, `ORB%`, `DRB%`)
conference <-
rbind(logs, games) %>%
merge(logos,
by="Team")
conference %>%
ggplot(aes(x=`DRB%`,
y=`ORB%`)) +
geom_hline(yintercept=mean(conference$`ORB%`), linetype="dashed") +
geom_vline(xintercept=mean(conference$`DRB%`), linetype="dashed") +
geom_image(aes(image=URL),
size=0.1,
stat='identity') +
labs(title="Who are the best and worst rebounding teams?",
subtitle=subtitle,
x="Defensive Rebound Rate (DRB%)",
y="Offensive Rebound Rate (ORB%)") +
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=10))
library(tidyverse)
library(ggplot2)
library(ggimage)
library(gsheet)
rm(list = ls())
women <- TRUE
mbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/mbb_uaa_scout.csv")
wbb_logs <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/wbb_uaa_scout.csv")
mbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1BcIP7CIYDTNnedcRG3U3HAIwluaJtz8LCAKfArlEh98/edit#gid=136251738")
wbb_games <- gsheet2tbl("https://docs.google.com/spreadsheets/d/12JWqAMfVrSZobLohmxQK6PyrbNbOQbM6ux4LxXqWenM/edit#gid=1703250336")
logos <- read_csv("https://raw.githubusercontent.com/jeremydumalig/Chicago-Analytics/main/uaa_logos.csv")
if (women) {
logs <- wbb_logs
games <- wbb_games
subtitle <- "UAA Women's Basketball | Through December 30, 2022"
} else {
logs <- mbb_logs
games <- mbb_games
subtitle <- "UAA Men's Basketball | Through December 30, 2022"
}
logs <-
logs %>%
filter(Opponent == "Total") %>%
select(Team, `ORB%`, `DRB%`)
games <-
games %>%
filter(Game == "Total") %>%
mutate(Team = "Chicago") %>%
select(Team, `ORB%`, `DRB%`)
conference <-
rbind(logs, games) %>%
merge(logos,
by="Team")
conference %>%
ggplot(aes(x=`DRB%`,
y=`ORB%`)) +
geom_hline(yintercept=mean(conference$`ORB%`), linetype="dashed") +
geom_vline(xintercept=mean(conference$`DRB%`), linetype="dashed") +
geom_image(aes(image=URL),
size=0.1,
stat='identity') +
labs(title="Who are the best and worst rebounding teams?",
subtitle=subtitle,
x="Defensive Rebound Rate (DRB%)",
y="Offensive Rebound Rate (ORB%)") +
theme_linedraw() +
theme(
plot.margin = margin(1, 0.5, 0.5, 0.5, "cm"),
plot.background = element_rect(fill = "grey90",
color = "black"),
legend.box.background = element_rect(size=0.75),
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
plot.title = element_text(size=18,
face="bold"),
plot.subtitle = element_text(size=14),
plot.caption = element_text(size=10))
library(tidyverse)
library(ggplot2)
library(gsheet)
library(gt)
rm(list = ls())
setwd("/Users/jeremydumalig/Documents/GitHub/Chicago-Analytics")
traditional_averages <- read_csv(file = "season_averages23.csv")
advanced_averages <- read_csv(file = "advanced_averages23.csv")
####################
traditional_averages <-
select(traditional_averages,
PTS, FGA, `3PA`, FTA, `FG%`, `3P%`, `FG%`,
AST, REB, OREB, DREB, STL, BLK, PF,
TOV,
`PTS OFF TOV`,
`2ND CHANCE`,
`PAINT`,
`FASTBREAK`,
BENCH)
####################
differential_sign <- function(number) {
if (number == 0) {
return("")
}
if (substr(format(number, nsmall = 1), 1, 1) != "-") {
return(paste("+", format(number, nsmall = 1), sep = ""))
} else {
return(paste("-", format(abs(number), nsmall = 1), sep = ""))
}
}
pregame_traditional <-
function(dataframe, type, opponent, location, date) {
if (location == 'Home') {
sub <- paste(date, ' | ', opponent, ' at UChicago', sep = '')
} else {
sub <- paste(date, ' | UChicago at ', opponent, sep = '')
}
dataframe <-
dataframe %>%
t() %>%
data.frame() %>%
mutate(Difference = as.numeric(X2) - as.numeric(X1))
dataframe %>%
mutate(Difference = map(dataframe$Difference, differential_sign)) %>%
select(X3, X1, Difference, X2) %>%
gt() %>%
cols_label(
X3 = '',
X1 = 'Chicago',
Difference = '',
X2 = 'Opponent'
) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = X3)) %>%
tab_style(style = list(cell_text(style = "italic", size = "small")),
locations = cells_body(columns = Difference)) %>%
tab_header(title = md(paste('**Pre-Game Report: ', type, '**', sep =
'')),
subtitle = sub)
}
pregame_advanced <-
function(dataframe, opponent, location, date) {
if (location == 'Home') {
sub <- paste(date, ' | ', opponent, ' at UChicago', sep = '')
} else {
sub <- paste(date, ' | UChicago at ', opponent, sep = '')
}
dataframe <-
dataframe %>%
select(-`...1`,-Team) %>%
t() %>%
data.frame() %>%
mutate(Difference = case_when(
(X3 == "PTS DIFF PER40") ~ 0,
TRUE ~ as.numeric(X2) - as.numeric(X1)
))
dataframe %>%
mutate(Difference = map(dataframe$Difference, differential_sign)) %>%
select(X3, X1, Difference, X2) %>%
gt() %>%
cols_label(
X3 = '',
X1 = 'Chicago',
Difference = '',
X2 = 'Opponent'
) %>%
tab_style(style = list(cell_text(weight = "bold")),
locations = cells_body(columns = X3)) %>%
tab_style(style = list(cell_text(style = "italic", size = "small")),
locations = cells_body(columns = Difference)) %>%
tab_header(title = md('**Pre-Game Report: Advanced**'),
subtitle = sub)
}
####################
info <- c('WashU', 'Away', '1/7/23')
pregame_traditional(traditional_averages, 'Traditional', info[1], info[2], info[3])
pregame_advanced(advanced_averages, info[1], info[2], info[3])
